[["index.html", "Notes on Git/Github/Gitlab Preface", " Notes on Git/Github/Gitlab Lingyun Zhang 2023-11-12 Preface I have been reading Pro Git (second edition) written by Scott Chacon and Ben Straub. I am writing down my notes while reading this book. "],["getting-started.html", "1 Getting Started 1.1 Big Picture 1.2 Important Concepts 1.3 Tools", " 1 Getting Started 1.1 Big Picture Git is the engine Github/Gitlab is remote platform (server) for hosting Git repositories Git is for version control Github/Gitlab allows to have your codebase backup files share files with others collaborate with others 1.2 Important Concepts The big idea behind Git is that it has a database that stores snapshots of whole file system. The core idea in Git is: Git thinks about its version data more like a stream of snapshots. Under a Git repository, files can be classified as tracked and untrackedthe Git database only cares about tracked files. For tracked files, there are three possible status, i.e modified, staged, and committed. modified means change has been madeGit knows this, because it has the databasethus new snapshots may be needed. staged means being markedyou need to do thisso when Git takes snapshot, it will only do for those on the stage. committed means snapshot being done. Remote Remote repositories are versions of your project that are hosted on the internet or network somewhere (e.g.Â Gitlab or Github). Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them. 1.3 Tools command Line (We can use Command Line in New Terminal in RStudio; if it does not work, then use Gitbash) GUI (RStudio provides a basic GUI) "],["branching.html", "2 Branching 2.1 Create a new branch 2.2 Get a new branch from remote 2.3 merge a branch to main 2.4 delete a local branch 2.5 delete a remote branch", " 2 Branching Two workflows: main branch + dev branchkeep them forever, and merge dev to main when this is ready main branch + topic branchwhen work is done at topic branch, merge it to main then delete the topic branch 2.1 Create a new branch git checkout -b new_branch # or git switch -c new_branch 2.2 Get a new branch from remote git fetch origin git checkout -b new_branch origin/new_branch 2.3 merge a branch to main git checkout main git merge a_branch 2.4 delete a local branch git checkout main git branch -d local_branch 2.5 delete a remote branch git fetch origin git push --delete origin remote_branch "],["using-gitlabgithub.html", "3 Using Gitlab/Github 3.1 Workflow (copied from Git Pro)", " 3 Using Gitlab/Github 3.1 Workflow (copied from Git Pro) 3.1.1 Integration-Manager Workflow Each developer has write access to their own public repository and read access to everyone elses. This scenario often includes a canonical repository that represents the official project. To contribute to that project, you create your own public clone of the project and push your changes to it. Then, you can send a request to the maintainer of the main project to pull in your changes. The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository. The process works as follows (see Integration-manager workflow): The project maintainer pushes to their public repository. A contributor clones that repository and makes changes. The contributor pushes to their own public copy. The contributor sends the maintainer an email asking them to pull changes. The maintainer adds the contributors repository as a remote and merges locally. The maintainer pushes merged changes to the main repository. 3.1.2 Centralized Workflow Set up a single repository, and give everyone on your team push access; Git wont let users overwrite each other. 3.1.3 Dictator and Lieutenants Workflow Various integration managers are in charge of certain parts of the repository; theyre called lieutenants. All the lieutenants have one integration manager known as the benevolent dictator. The benevolent dictator pushes from their directory to a reference repository from which all the collaborators need to pull. The process works like this (see Benevolent dictator workflow): Regular developers work on their topic branch and rebase their work on top of master. The master branch is that of the reference repository to which the dictator pushes. Lieutenants merge the developers topic branches into their master branch. The dictator merges the lieutenants master branches into the dictators master branch. Finally, the dictator pushes that master branch to the reference repository so the other developers can rebase on it. "],["appendix.html", "Appendix Git commnads .gitignore example", " Appendix Git commnads # basic cd ## change directory ls ## list files folders dir ## show files/folders under a directory # git info which git where git git --version # config git config --global user.name &quot;Your Name&quot; git config --global user.emai. &quot;Your email address&quot; git config --global init.defaultBranch main git config --list ## show settings # add git add README ## add file README git add *.R ## add files with extension R git add . ## all files under the directory # commit git commit -m &quot;initial commit&quot; git commit -a -m &quot;intial commit&quot; ## add plus commit # checking status git status # remove git rm -f file_name ## stopping tracking and delete the file git rm --cached file_name ## stopping tracking but keep the file # move git mv file_from file_to ## equivalent to mv file_from file_to git rm file_from git add file_to # create a new branch and check it out git branch new_branch_name git checkout new_branch_name ## or git checkout -b new_branch_name git branch ## local branches git branch -v ## local branches&#39; details git branch -vv ## more local branches&#39; details git branch -a ## finding all branches # merge git branch -a git checkout main git merge new_branch_name git branch --merged ## finding branches merged git branch --no-merged ## finding branches not merged git branch -d a_branch ## delete a_branch at local # working with remote git remote ## show shortnames of each remote handle---almost sure is &quot;origin&quot; git remote -v ## show remote url git remote show origin ## inspecting remote origin # fetch and pull git fetch origin git pull # push git push -u origin main ## or git push -u origin master git push --set-upstream origin new_local_b ## push a new local branch git push origin --delete new_local_b ## delete a remote branch .gitignore example # ignore all .a files *.a # but do track lib.a, even though you&#39;re ignoring .a files above !lib.a # only ignore the TODO file in the current directory, not subdir/TODO /TODO # ignore all files in any directory named build build/ # ignore doc/notes.txt, but not doc/server/arch.txt doc/*.txt # ignore all .pdf files in the doc/ directory and any of its subdirectories doc/**/*.pdf "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
